// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String
  email String

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Server {
  id String @id @default(uuid())
  name String
  imageUrl String
  inviteCode String @unique
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members Member[]
  channels Channel[]

  @@index([profileId])
}


enum MemberRole {
  ADMIN
  GUEST
  MODERATOR
}


model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)
  profileId String
  serverId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  directMessages DirectMessage[]

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  @@index([profileId])
  @@index([serverId])
}


enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}


model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)
  profileId String
  serverId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade) 

  @@index([profileId])
  @@index([serverId])
}


model Message {
  id String @id @default(uuid())
  content String
  fileUrl String?
  memberId String
  channelId String
  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([memberId])
}



model Conversation {
  id String @id @default(uuid())
  memberOneId String
  memberTwoId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberOneId])
  @@index([memberTwoId])
  @@unique([memberOneId, memberTwoId])
}


model DirectMessage {
  id String @id @default(uuid())
  content String
  fileUrl String?
  memberId String
  conversationId String
  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([conversationId])
}